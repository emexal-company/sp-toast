{"version":3,"file":"toast.component.js","sourceRoot":"","sources":["../src/toast.component.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAEtD,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAC;AACzC,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAE7C,OAAO,WAAW,MAAM,gBAAgB,CAAC;AACzC,OAAO,QAAQ,MAAM,kBAAkB,CAAC;AAGxC,IAAa,KAAK,GAAlB,MAAa,KAAM,SAAQ,IAAI;IAA/B;;QAGqC,UAAK,GAAG,EAAE,CAAC;QACX,UAAK,GAAG,EAAE,CAAC;QACX,YAAO,GAAG,EAAE,CAAC;QACZ,SAAI,GAAG,KAAK,CAAC;QACb,aAAQ,GAAG,KAAK,CAAC;QACjB,aAAQ,GAAG,KAAK,CAAC;IAcvD,CAAC;IAZW,MAAM;QACd,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAES,WAAW;QACnB,MAAM,YAAY,GAAG,IAAI,WAAW,CAAC,SAAS,EAAE;YAC9C,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IACnC,CAAC;CAEF,CAAA;AArBe,qBAAe,GAAG,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAE/C;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;oCAAmB;AAClB;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;oCAAmB;AAClB;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;sCAAqB;AACnB;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;mCAAqB;AACpB;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;uCAAyB;AACxB;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;uCAAyB;AAR1C,KAAK;IADjB,aAAa,CAAC,UAAU,CAAC;GACb,KAAK,CAsBjB;SAtBY,KAAK","sourcesContent":["import { customElement, property } from 'lit-element';\r\n\r\nimport { Base } from '@spectrum/sp-base';\r\nimport { Button } from '@spectrum/sp-button';\r\n\r\nimport toastStyles from './toast.styles';\r\nimport template from './toast.template';\r\n\r\n@customElement('sp-toast')\r\nexport class Toast extends Base {\r\n  public static componentStyles = Button.componentStyles.concat(toastStyles);\r\n\r\n  @property({ type: String }) public width = '';\r\n  @property({ type: String }) public label = '';\r\n  @property({ type: String }) public content = '';\r\n  @property({ type: Boolean }) public info = false;\r\n  @property({ type: Boolean }) public negative = false;\r\n  @property({ type: Boolean }) public positive = false;\r\n\r\n  protected render() {\r\n    return template.call(this);\r\n  }\r\n\r\n  protected handleClose() {\r\n    const disposeEvent = new CustomEvent('dispose', {\r\n      bubbles: true,\r\n      composed: true,\r\n    });\r\n    this.dispatchEvent(disposeEvent);\r\n  }\r\n\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'sp-toast': Toast;\r\n  }\r\n}\r\n"]}